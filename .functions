# -------------------------------------------------------------- //
# Functions
# -------------------------------------------------------------- //

##
# ProcessMaker-related
##
function pmReset() {
	cd "$HOME"/code;

	if [ -d ./processmaker ]; then
		rm -rf ./processmaker;
	fi

	gcr processmaker
	cd processmaker
	composer install -o
	npm i
	copyFilesToProcessMakerRepoForLocalDev
	pi
	pstorm .
	supervisorctl restart all
}

function pi() {
        php artisan processmaker:install --app-debug \
                                 --telescope \
                                 --db-username=root \
                                 --db-password="" \
				 --db-host=127.0.0.1 \
				 --db-port=3306 \
                                 --db-name=processmaker \
                                 --url=http://processmaker.test \
                                 --password=12345678 \
                                 --email=alex.runyan@processmaker.test \
                                 --username=admin \
                                 --first-name=Alex \
                                 --last-name=Runyan \
                                 --redis-client=phpredis;
	
	# Append necessary variables to .env file
        appendVarsToProcessMakerEnvForLocalDev
}

##
# Require (as composer) all available PM packages
##
function composerRequireAllPM() {
	cd "$HOME"/code/processmaker

	if [ -f "$HOME"/packages/composer/package-list.txt ]; then
                while read line; do
			composer require processmaker/"$line" && /usr/local/bin/php artisan "$line":install
                done <"$HOME"/packages/composer/package-list.txt
        fi
}

##
# Clone all packages from ProcessMaker
##
function cloneAllPM() {
	cd "$HOME"/packages/composer/processmaker

	if [ -f ../package-list.txt ]; then
		while read line; do
			GREEN='\033[0;32m'
			echo -e "${GREEN}Cloning $line..."
			gcr $line
			echo "\n"
		done <../package-list.txt
	fi
}

##
# Clone a ProcessMaker GitHub repo
function gcr() {
	git clone https://github.com/ProcessMaker/"$1".git
}

copyFilesToProcessMakerRepoForLocalDev() {
	PROCESSMAKER_PATH="$HOME"/code/processmaker

	# Delete any existing symlink to PHPStorms'
	# settings repository
	if [ -L "$PROCESSMAKER_PATH"/.idea ]; then
		rm -rf "$PROCESSMAKER_PATH"/.idea
	fi

	# Now freshly link it
	ln -s "$HOME"/.config/dotfiles/.phpstorm/.idea "$PROCESSMAKER_PATH"/.idea

	# Copy local-only versions of files for dev
	cp "$HOME"/snippets/processmaker/ScriptDockerBindingFilesTrait.php "$PROCESSMAKER_PATH"/ProcessMaker/Models
	cp "$HOME"/snippets/processmaker/TelescopeServiceProvider.php "$PROCESSMAKER_PATH"/ProcessMaker/Providers
}

appendVarsToProcessMakerEnvForLocalDev() {
	if [[ -f ~/code/processmaker/.env ]]; then
		# Append other necessary variables
		echo "SESSION_SECURE_COOKIE=false" >> ~/code/processmaker/.env
		echo "LARAVEL_ECHO_SERVER_PROTO=http" >> ~/code/processmaker/.env
		echo "LARAVEL_ECHO_SERVER_SSL_KEY=\"\"" >> ~/code/processmaker/.env
		echo "LARAVEL_ECHO_SERVER_SSL_CERT=\"\"" >> ~/code/processmaker/.env
		echo "API_SSL_VERIFY=0" >> ~/code/processmaker/.env
		echo "NODE_BIN_PATH=/usr/local/bin/node" >> ~/code/processmaker/.env
	fi
}

convertVideosToGifs() {
	for f in ./*.mp4; do
		ffmpeg -i "$f" -vf scale=320:-1 "${f%.*}.gif"
	done
}

runDockerComposeUp() {
    if [[ -d ./docker ]]; then
        cd ./docker
    fi

    docker-compose up --detach --build
}

cloneAll() {
    # Make the url to the input github organization's repository page.
    ORG_URL="https://api.github.com/orgs/${1}/repos?per_page=200";

    # List of all repositories of that organization (seperated by newline-eol).
    ALL_REPOS=$(curl -s ${ORG_URL} | grep html_url | awk 'NR%2 == 0' \
                | cut -d ':' -f 2-3 | tr -d '",');

    # Clone all the repositories.
    for ORG_REPO in ${ALL_REPOS}; do
        git clone ${ORG_REPO}.git;
    done
}

function killDns() {
        sudo killall -HUP mDNSResponder;
        echo "DNS responder service restarted"
}

function stopWebServicesQuiet() {
	sudo echo "";
        GREEN='\033[0;32m';
        echo -e "${GREEN}Stopping any running web services...";
	sudo brew services stop --quiet --all > /dev/null 2>&1;
	brew services stop --quiet --all > /dev/null 2>&1;
	supervisorctl stop --all --quiet > /dev/null 2>&1;
	sudo killall -9 php > /dev/null 2>&1;
	sudo killall -9 mysql@5.7 > /dev/null 2>&1;
	valet services;
}

function startWebServices() {
	GREEN='\033[0;32m';
	echo -e "${GREEN}Stopping any running web services...";
	stopWebServicesQuiet > /dev/null 2>&1;
	echo -e "${GREEN}Starting php, dnsmasq, and nginx...";
	valet start;
	echo -e "${GREEN}Starting mysql@5.7...";
	brew services run --quiet mysql@5.7;
	echo -e "${GREEN}Starting redis...";
	brew services run --quiet redis;
        echo -e "${GREEN}Starting supervisor...";
        brew services run --quiet supervisor;
	echo -e "${GREEN}Services started!";
	valet services;
}
