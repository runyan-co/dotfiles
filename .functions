#!/usr/bin/env bash

# -------------------------------------------------------------- //
# Functions
# -------------------------------------------------------------- //

##
# Removes existing openapitools/openapi-generator-cli images and
# pulls down the correct version, and tags it with a backwards-compatible
# version for use in processmaker/processmaker v4.1.27
##
function pmDockerSetup() {
  IMAGE=openapitools/openapi-generator-cli

  docker rmi "$IMAGE":v5.1.1 --force > /dev/null 2>&1;
  docker rmi "$IMAGE":v4.2.2 --force > /dev/null 2>&1;

  docker pull "$IMAGE":v5.1.1 > /dev/null 2>&1;
  docker tag "$IMAGE":v5.1.1 "$IMAGE":v4.2.2 > /dev/null 2>&1;

  echo "$IMAGE images successfully setup"
}


##
# Use bat under the hood to format/stylize the file contents output
##
function tailWithFormatting() {
  tail -f "$1" | bat --paging=never -l log
}


##
# Clone a ProcessMaker GitHub repo
##
function gcr() {
  git clone https://github.com/processmaker/"$1".git
  if [ ! -z "$2" ]; then cd "$1" && git checkout "$2" && cd ..; fi
}

##
# Use ffmpeg to convert any found mp4 files in the 
# current working directory to GIFs
##
function convertVideosToGifs() {
  for f in ./*.mp4; do ffmpeg -i "$f" -vf scale=320:-1 "${f%.*}.gif"; done
}


##
# Clone all repositories for a given GitHub organization
##
function cloneAll() {
  # Make the url to the input github organization's repository page.
  ORG_URL="https://api.github.com/orgs/${1}/repos?per_page=200";

  # List of all repositories of that organization (seperated by newline-eol).
  ALL_REPOS=$(curl -s ${ORG_URL} | grep html_url | awk 'NR%2 == 0' | cut -d ':' -f 2-3 | tr -d '",');

  # Clone all the repositories.
  for ORG_REPO in ${ALL_REPOS}; do git clone ${ORG_REPO}.git; done
}


##
# Restart the macOS DNS service
##
function killDns() {
  sudo killall -HUP mDNSResponder;
  echo "DNS responder service restarted"
}

##
# Stop local, running web services
##
function stopWebServicesQuiet() {
  sudo -v
  echo "Stopping dev services..."
  
  sudo brew services stop --quiet --all > /dev/null 2>&1
  brew services stop --quiet --all > /dev/null 2>&1
  
  # Kill supervisor and any running supervised processes
  supervisorctl stop --all --quiet > /dev/null 2>&1
  
  # Kill any orphaned php processes
  sudo killall -9 php > /dev/null 2>&1
}

##
# Start local web services
##
function startWebServices() {
  valet start &
  brew services run --quiet mysql &
  brew services run --quiet redis &
  brew services run --quiet supervisor &
  wait
  valet services;
}
