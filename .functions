# -------------------------------------------------------------- //
# Functions
# -------------------------------------------------------------- //

##
# ProcessMaker-related
##
function pi() {
        php artisan processmaker:install --app-debug \
                                 --telescope \
                                 --db-username=root \
                                 --url=http://processmaker.test \
                                 --password=12345678 \
                                 --email=alex.runyan@processmaker.test \
                                 --username=admin \
                                 --first-name=Alex \
                                 --last-name=Runyan \
                                 --redis-client=phpredis;

        appendVarsToProcessMakerEnvForLocalDev
}

copyFilesToProcessMakerRepoForLocalDev() {
	#cp ~/Snippets/processmaker/ScriptDockerBindingFilesTrait.php ~/Code/processmaker/ProcessMaker/Models
	cp ~/Snippets/processmaker/TelescopeServiceProvider.php ~/Code/processmaker/ProcessMaker/Providers
}

appendVarsToProcessMakerEnvForLocalDev() {
	if [[ -f ~/Code/processmaker/.env ]]; then
		echo "SESSION_SECURE_COOKIE=false" >> ~/Code/processmaker/.env
		echo "LARAVEL_ECHO_SERVER_PROTO=http" >> ~/Code/processmaker/.env
		echo "LARAVEL_ECHO_SERVER_SSL_KEY=\"\"" >> ~/Code/processmaker/.env
		echo "LARAVEL_ECHO_SERVER_SSL_CERT=\"\"" >> ~/Code/processmaker/.env
		echo "API_SSL_VERIFY=0" >> ~/Code/processmaker/.env
		echo "NODE_BIN_PATH=/usr/local/bin/node" >> ~/Code/processmaker/.env
	fi
}

convertVideosToGifs() {
	for f in ./*.mp4; do
		ffmpeg -i "$f" -vf scale=320:-1 "${f%.*}.gif"
	done
}

runDockerComposeUp() {
    if [[ -d ./docker ]]; then
        cd ./docker
    fi

    docker-compose up --detach --build
}

cloneAll() {
    # Make the url to the input github organization's repository page.
    ORG_URL="https://api.github.com/orgs/${1}/repos?per_page=200";

    # List of all repositories of that organization (seperated by newline-eol).
    ALL_REPOS=$(curl -s ${ORG_URL} | grep html_url | awk 'NR%2 == 0' \
                | cut -d ':' -f 2-3 | tr -d '",');

    # Clone all the repositories.
    for ORG_REPO in ${ALL_REPOS}; do
        git clone ${ORG_REPO}.git;
    done
}

function killDns() {
        sudo killall -HUP mDNSResponder;
        echo "DNS responder service restarted"
}

function stopWebServicesQuiet() {
	sudo echo "";
        GREEN='\033[0;32m';
        echo -e "${GREEN}Stopping any running web services...";
	sudo brew services stop --quiet --all > /dev/null 2>&1;
	brew services stop --quiet --all > /dev/null 2>&1;
	#supervisorctl stop --all --quiet > /dev/null 2>&1;
	sudo killall -9 php > /dev/null 2>&1;
	#sudo killall -9 postgres > /dev/null 2>&1;
	valet services;
}

function startWebServices() {
	GREEN='\033[0;32m';
	echo -e "${GREEN}Stopping any running web services...";
	stopWebServicesQuiet > /dev/null 2>&1;
	echo -e "${GREEN}Starting php, dnsmasq, and nginx...";
	valet start;
	echo -e "${GREEN}Starting mysql@5.7...";
	brew services run --quiet mysql@5.7;
	echo -e "${GREEN}Starting redis...";
	brew services run --quiet redis;
	echo -e "${GREEN}Services started!";
	valet services;
}
