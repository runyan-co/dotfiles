# -------------------------------------------------------------- //
# Functions
# -------------------------------------------------------------- //

##
# ProcessMaker-related
##
function pmReset() {
	GREEN='\033[0;32m'
	TEAL='\033[0;36m'

	# Stop running processes
	echo -e "${TEAL}Stopping horizon and echo server..."
	supervisorctl stop all;

	# Flush Redis
	echo -e "\n${TEAL}Flushing Redis..."
	redis-cli flushall;

	# Remove/recreate the database
	echo -e "\n${TEAL}Dropping/replacing database..."
	dropAndCreateProcessMakerDatabase;

	cd "$HOME"/code;

	# Remove the current codebase
	if [ -d ./processmaker ]; then
		echo -e "\n${TEAL}Removing old codebase..."
		rm -rf ./processmaker;
	fi

	# Clone down the repo and
	# If an argument is passed, then use that
	# to represent the desired branch
	echo -e "\n${TEAL}Cloning core repo..."
	if [ ! -z "$1" ]; then
		gcr processmaker "$1";
	else
		gcr processmaker;
	fi

	# Install composer dependencies
	cd processmaker
	echo -e "\n${TEAL}Installing composer dependencies..."
	composer install -o --quiet

	# Install npm dependencies
	echo -e "\n${TEAL}Installing npm dependencies..."
	npm i

	# Copy over the local versions of a couple
	# files so we can develop locally
	echo -e "\n${TEAL}Copying local files..."
	copyFilesToProcessMakerRepoForLocalDev
	
	# Run the installation process 
	# (pi is a function defined below)
	echo -e "\n${TEAL}Running artisan installation process..."
	pi

	# Restart horizon
	echo -e "\n${TEAL}Restarting horizon and echo server..."
	supervisorctl start all

	echo "\n";
	echo -e "${GREEN}**********************************";
	echo -e "${GREEN}*********** Finished! ************";
	echo -e "${GREEN}**********************************";
}

##
# Pull down latest for each package
##
function gitPullPackages() {
	cd "$HOME"/packages/composer/processmaker

	for d in */ ; do
		cd "$d"
		git pull
		cd ..
	done

	echo "All packages up to do date with GitHub";
}

##
# Get default branch
##
function getDefaultGitBranchName() {
	git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
}

##
# Drops 'processmaker' database (in MySQL) and
# creates a new one with the same name
##
function dropAndCreateProcessMakerDatabase() {
	# Drop the processmaker database
	mysql -u root <<EOFMYSQL
DROP DATABASE processmaker;
EOFMYSQL
	# Create the new one
	mysql -u root <<EOFMYSQL
CREATE DATABASE processmaker;
EOFMYSQL
}

##
# Runs the ProcessMaker core install Artisan command
##
function pi() {
        php artisan processmaker:install --app-debug \
                                 --telescope \
                                 --db-username=root \
				 --db-host=127.0.0.1 \
				 --db-port=3306 \
				 --data-driver=mysql \
                                 --db-name=processmaker \
                                 --url=http://processmaker.test \
                                 --password=12345678 \
                                 --email=alex.runyan@processmaker.test \
                                 --username=admin \
                                 --first-name=Alex \
                                 --last-name=Runyan \
                                 --redis-client=phpredis \
				 --session-domain="";
	
	# Append necessary variables to .env file
        appendVarsToProcessMakerEnvForLocalDev
}

function installBrewCasksFromDotfiles() {
	cd "$HOME"/.config/dotfiles

	if [ -f ./.brew-casks ]; then
		while read line; do
			brew install --cask "$line"
		done < ./.brew-casks
	fi
}

##
# Remove composer packages
##
function composerRemoveAllPM() {
	cd "$HOME"/code/processmaker

	if [ -f "$HOME"/packages/composer/.processmaker-packages ]; then
		while read line; do
                        GREEN='\033[0;32m'

                        echo -e "${GREEN}Running package uninstall command...\n"
                        /opt/homebrew/bin/php artisan "$line":uninstall > /dev/null 2>&1;

                        echo -e "${GREEN}Composer removal of processmaker/$line...\n"
                        composer remove processmaker/"$line" --quiet

                        echo "\n"

                done <"$HOME"/packages/composer/.processmaker-packages
        fi
}

##
# Require (as composer) all available PM packages
##
function composerRequireAllPM() {
	cd "$HOME"/code/processmaker

	if [ -f "$HOME"/packages/composer/.processmaker-packages ]; then
                while read line; do
			GREEN='\033[0;32m'
			RED='\033[0;31m'
			TEAL='\033[0;36m'

			echo -e "${TEAL}Composer installation of processmaker/$line...";
			composer require processmaker/"$line" --quiet --no-interaction

			if [ -d ./vendor/processmaker/$line ]; then
                        	echo -e "${GREEN}Running package install command...";
                        	/opt/homebrew/bin/php artisan "$line":install --no-interaction
                        	
				echo -e "${GREEN}Publishing package assets...";
                        	/opt/homebrew/bin/php artisan vendor:publish --tag="$line" --no-interaction
                        
				echo -e "${GREEN}Package: processmaker/$line installed!";
			else
				echo "${RED}Something went wrong installing ${line}";
				return 1;
			fi

			echo "\n";

                done <"$HOME"/packages/composer/.processmaker-packages
        fi

	# For some reason, we also need to manually publish
	# the vendor assets for the savedsearch package
	if [ -d ./vendor/processmaker/package-savedsearch ]; then
		/usr/local/bin/php artisan vendor:publish --tag=package-savedsearch --quiet
	fi
}

##
# Clone all packages from ProcessMaker
##
function cloneAllPM() {
	cd "$HOME"/packages/composer/processmaker

	if [ -f ../.processmaker-packages ]; then
		while read line; do
			GREEN='\033[0;32m'
			echo -e "${GREEN}Cloning $line..."
			gcr $line
			cd $line
			git checkout $(getDefaultGitBranchName)
			cd ..
			echo "\n"
		done <../.processmaker-packages
	fi
}

##
# Clone a ProcessMaker GitHub repo
function gcr() {
	git clone https://github.com/ProcessMaker/"$1".git

	if [ ! -z "$2" ]; then
		cd "$1"
		git checkout "$2"
		cd ..
	fi
}

copyFilesToProcessMakerRepoForLocalDev() {
	PROCESSMAKER_PATH="$HOME"/code/processmaker

	# Delete any existing symlink to PHPStorms'
	# settings repository
	if [ -L "$PROCESSMAKER_PATH"/.idea ]; then
		rm -rf "$PROCESSMAKER_PATH"/.idea
	fi

	# Symlink it
	ln -s "$HOME"/.config/dotfiles/.phpstorm/.idea "$PROCESSMAKER_PATH"/.idea
	
	# Delete the laravel logs folder
	if [ -d "$PROCESSMAKER_PATH"/storage/logs ]; then
		rm -rf "$PROCESSMAKER_PATH"/storage/logs
	fi

	# Then symlink to the ~/logs
	ln -s "$HOME"/logs "$PROCESSMAKER_PATH"/storage/logs

	# Copy local-only versions of files for dev
	#cp "$HOME"/snippets/processmaker/TelescopeServiceProvider.php "$PROCESSMAKER_PATH"/ProcessMaker/Providers
}

appendVarsToProcessMakerEnvForLocalDev() {
	if [ -f "$HOME"/code/processmaker/.env ]; then
		# Remove incorrect, preset vars
		sed -i '' '/SESSION_DOMAIN=http:\/\/processmaker.test/d' ~/code/processmaker/.env
		sed -i '' '/DOCKER_HOST_URL=http:\/\/processmaker.test/d' ~/code/processmaker/.env

		# Append other necessary vars
		echo "SESSION_DRIVER=redis" >> ~/code/processmaker/.env
		echo "CACHE_DRIVER=redis" >> ~/code/processmaker/.env
		echo "PROCESSMAKER_SCRIPTS_TIMEOUT=/opt/homebrew/bin/timeout" >> ~/code/processmaker/.env
		echo "DOCKER_HOST_URL=http://host.docker.internal" >> ~/code/processmaker/.env
		echo "SESSION_SECURE_COOKIE=false" >> ~/code/processmaker/.env
		echo "SESSION_DOMAIN=processmaker.test" >> ~/code/processmaker/.env
		echo "LARAVEL_ECHO_SERVER_PROTO=http" >> ~/code/processmaker/.env
		echo "LARAVEL_ECHO_SERVER_SSL_KEY=\"\"" >> ~/code/processmaker/.env
		echo "LARAVEL_ECHO_SERVER_SSL_CERT=\"\"" >> ~/code/processmaker/.env
		echo "API_SSL_VERIFY=0" >> ~/code/processmaker/.env
		echo "NODE_BIN_PATH=/opt/homebrew/bin/node" >> ~/code/processmaker/.env
		echo "TELESCOPE_JOB_WATCHER=false" >> ~/code/processmaker/.env
	fi
}

convertVideosToGifs() {
	for f in ./*.mp4; do
		ffmpeg -i "$f" -vf scale=320:-1 "${f%.*}.gif"
	done
}

runDockerComposeUp() {
    if [[ -d ./docker ]]; then
        cd ./docker
    fi

    docker-compose up --detach --build
}

cloneAll() {
    # Make the url to the input github organization's repository page.
    ORG_URL="https://api.github.com/orgs/${1}/repos?per_page=200";

    # List of all repositories of that organization (seperated by newline-eol).
    ALL_REPOS=$(curl -s ${ORG_URL} | grep html_url | awk 'NR%2 == 0' \
                | cut -d ':' -f 2-3 | tr -d '",');

    # Clone all the repositories.
    for ORG_REPO in ${ALL_REPOS}; do
        git clone ${ORG_REPO}.git;
    done
}

function killDns() {
        sudo killall -HUP mDNSResponder;
        echo "DNS responder service restarted"
}

function stopWebServicesQuiet() {
	sudo echo "";
        GREEN='\033[0;32m';
        echo -e "${GREEN}Stopping any running web services...";
	sudo brew services stop --quiet --all > /dev/null 2>&1;
	brew services stop --quiet --all > /dev/null 2>&1;
	supervisorctl stop --all --quiet > /dev/null 2>&1;
	sudo killall -9 php > /dev/null 2>&1;
	sudo killall -9 mysql@5.7 > /dev/null 2>&1;
	valet services;
}

function startWebServices() {
	GREEN='\033[0;32m';
	#echo -e "${GREEN}Stopping any running web services...";
	#stopWebServicesQuiet > /dev/null 2>&1;
	echo -e "${GREEN}Starting php, dnsmasq, and nginx...";
	valet start;
	echo -e "${GREEN}Starting mysql@5.7...";
	brew services run --quiet mysql@5.7;
	echo -e "${GREEN}Starting redis...";
	brew services run --quiet redis;
        echo -e "${GREEN}Starting supervisor...";
        brew services run --quiet supervisor;
	echo -e "${GREEN}Services started!";
	valet services;
}
